version: "2.1"

volumes:
  fdroid:
  portal:
  mapeo:
  crawls:
  pywb-archive:
  minio-data:
  installers:
  mapeo-bridge:
  postgres_data:
  mbtiles:
  bundler:
  terrastories-data:
  terrastories-media:
  terrastories-import:
  bdi_db:
  pwc_db:
services:
  # https://balena-labs-research.github.io/starter-interface
  balena-starter-interface:
    build: services/interface
    environment:
      SET_HOSTNAME: "edt" # Optional. Changes the device hostname. UI will become accesible on `balena.local`.
      UDEV: on # Enables ability to auto mount USB drives in to the container
      NETWORK_MODE: bridge
    restart: always
    ports:
      - "80:80"
    volumes:
      - "bdi_db:/app/db" # Stores UI database files
      - crawls:/app/storage/websites
      - mapeo:/app/storage/mapeo
      - fdroid:/app/storage/fdroid
      - installers:/app/storage/installers
      - terrastories-import:/app/storage/terrastories/import
      - terrastories-media:/app/storage/terrastories/media
    privileged: true # This can be removed if not using the USB mounting feature
    labels:
      io.balena.features.supervisor-api: 1
      io.balena.features.balena-api: 1
  # https://github.com/balena-labs-research/python-wifi-connect
  python-wifi-connect:
    image: ghcr.io/balena-labs-research/python-wifi-connect:latest
    environment:
      # Listening IP and port
      PWC_HOST: bridge # `bridge` specifies that this is on the bridge network and to use container name
      PWC_PORT: 9090
      # Hotspot details
      PWC_HOTSPOT_SSID: "Earth Defenders Toolkit" # Name as it appears in list of WiFi networks
      # PWC_HOTSPOT_PASSWORD: "balena01" # Optional. Must be 8 characters or more
      # PWC_INTERFACE: "wlan0"

      # Required system variables
      DBUS_SYSTEM_BUS_ADDRESS: "unix:path=/host/run/dbus/system_bus_socket"
    network_mode: "host"
    restart: on-failure
    volumes:
      - "pwc_db:/app/db" # Optional if not setting the hotspot ssid and password via the API
    labels:
      io.balena.features.dbus: "1"
    cap_add:
      - NET_ADMIN
    privileged: true # This can be removed if you do not need the LED connectivity indicator.
  # https://hub.docker.com/_/httpd
  portal:
    build: services/portal
    restart: always
    volumes:
      - "portal:/usr/local/apache2/htdocs"
      - "installers:/usr/local/apache2/htdocs/installers"
      - "fdroid:/usr/local/apache2/htdocs/fdroid"
    ports:
      - 8080:80
  # https://hub.docker.com/r/communityfirst/mapeo-bridge
  mapeo-bridge:
    image: communityfirst/mapeo-bridge
    network_mode: host
    volumes:
      - "mapeo-bridge:/usr/src/output"
    restart: unless-stopped
  # https://hub.docker.com/r/filebrowser/filebrowser
  filebrowser:
    build: services/filebrowser
    restart: unless-stopped
    volumes:
      - crawls:/srv/websites
      - mapeo:/srv/mapeo
      - fdroid:/srv/fdroid
      - installers:/srv/installers
      - terrastories-import:/srv/terrastories/import
      - terrastories-media:/srv/terrastories/media
    ports:
      - 8081:80
    command: -- c
  # https://hub.docker.com/r/linuxserver/syncthing/
  syncthing:
    build: services/syncthing
    volumes:
      - crawls:/config/websites
      - mapeo:/config/mapeo
      - fdroid:/config/fdroid
      - installers:/config/installers
    ports:
      - 8082:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped
  # https://hub.docker.com/_/postgres
  db:
    image: postgres:11
    ports:
      - 5432:5432
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
  # https://hub.docker.com/r/terrastories/terrastories
  terrastories:
    image: terrastories/terrastories
    ports:
      - 8083:3000
    depends_on:
      - db
    volumes:
      - bundler:/usr/local/bundle
      - terrastories-data:/api
      - terrastories-media:/media
      - terrastories-import:/api/import/media
  # https://hub.docker.com/r/maptiler/tileserver-gl
  tile-server:
    image: maptiler/tileserver-gl
    ports:
      - 8085:8080
    volumes:
      - mbtiles:/data
  # https://hub.docker.com/r/webrecorder/pywb
  pywb:
    build: services/pywb
    ports:
      - 8086:8080
    volumes:
      - pywb-archive:/webarchive
      - crawls:/source
