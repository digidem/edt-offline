version: "2.1"

volumes:
  fdroid:
  edt-offline-portal:
  mapeo:
  crawls:
  pywb-archive:
  minio-data:
  installers:
  mapeo-bridge:
  postgres_data:
  mbtiles:
  bundler:
  terrastories-data:
  terrastories-media:
  terrastories-import:
  interface_db:
  wifi_db:
services:
  # https://github.com/digidem/starter-interface
  balena-interface:
    build: services/interface
    restart: always
    environment:
      NETWORK_MODE: bridge
    ports:
      - "80:80"
      - "8079:8079"
    volumes:
      - interface_db:/app/db # Stores UI database files
      - crawls:/app/storage/websites
      - mapeo:/app/storage/mapeo
      - fdroid:/app/storage/fdroid
      - installers:/app/storage/installers
      - mbtiles:/app/storage//mbtiles
      - terrastories-import:/app/storage/terrastories/import
      - terrastories-media:/app/storage/terrastories/media
    privileged: true # This can be removed if not using the USB mounting feature
    labels:
      io.balena.features.supervisor-api: 1
      io.balena.features.balena-api: 1
  # https://github.com/balena-labs-research/python-wifi-connect
  python-wifi-connect:
    image: ghcr.io/balena-labs-research/python-wifi-connect:latest
    environment:
      PWC_HOST: bridge
      DBUS_SYSTEM_BUS_ADDRESS: "unix:path=/host/run/dbus/system_bus_socket"
    network_mode: "host"
    restart: on-failure
    volumes:
      - wifi_db:/app/db # Optional if not setting the hotspot ssid and password via the API
    labels:
      io.balena.features.dbus: "1"
    cap_add:
      - NET_ADMIN
    privileged: true # This can be removed if you do not need the LED connectivity indicator.
  # https://hub.docker.com/r/communityfirst/edt-offline-edt-portal
  portal:
    image: communityfirst/edt-offline-portal:nightly
    restart: always
    volumes:
      - edt-offline-portal:/usr/src/nuxt-app
    ports:
      - 8080:3000
  # https://hub.docker.com/r/communityfirst/mapeo-bridge
  mapeo-bridge:
    image: communityfirst/mapeo-bridge
    network_mode: host
    volumes:
      - mapeo-bridge:/usr/src/output
    restart: unless-stopped
  # https://hub.docker.com/r/filebrowser/filebrowser
  filebrowser:
    build: services/filebrowser
    restart: unless-stopped
    volumes:
      - crawls:/srv/websites
      - mapeo:/srv/mapeo
      - fdroid:/srv/fdroid
      - installers:/srv/installers
      - mbtiles:/srv/mbtiles
      - mapeo-bridge:/srv/terrastories-places
      - terrastories-import:/srv/terrastories/import
      - terrastories-media:/srv/terrastories/media
    ports:
      - 8081:80
    command: -- c
  # https://hub.docker.com/r/linuxserver/syncthing/
  syncthing:
    build: services/syncthing
    volumes:
      - crawls:/config/websites
      - mapeo:/config/mapeo
      - fdroid:/config/fdroid
      - installers:/config/installers
      - mbtiles:/config/mbtiles
    ports:
      - 8082:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped
  # https://hub.docker.com/_/postgres
  terrastories-db:
    image: postgres:11
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: terrastories
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
  # https://hub.docker.com/r/terrastories/terrastories
  terrastories:
    build: services/terrastories
    ports:
      - 8083:3000
    depends_on:
      - terrastories-db
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/terrastories
      RAILS_ENV: offline
      CHOKIDAR_USEPOLLING: 'true'
      USE_LOCAL_MAP_SERVER: 'true'
      OFFLINE_MAP_STYLE: /tileserver/styles/terrastories-map/style.json
      HOST_HOSTNAME: 0.0.0.0
    volumes:
      - bundler:/usr/local/bundle
      - terrastories-data:/api
      - terrastories-media:/media
      - terrastories-import:/api/import/media
  # https://hub.docker.com/r/maptiler/tileserver-gl
  tileserver:
    build: services/tileserver
    ports:
      - 8085:8080
    volumes:
      - mbtiles:/data
  # https://hub.docker.com/r/webrecorder/pywb
  pywb:
    build: services/pywb
    ports:
      - 8086:8080
    volumes:
      - pywb-archive:/webarchive
      - crawls:/source
  # https://hub.docker.com/_/httpd
  httpd:
    build: services/httpd
    ports:
      - 8087:80
    volumes:
      - installers:/usr/local/apache2/htdocs/installers
      - fdroid:/usr/local/apache2/htdocs/repo
